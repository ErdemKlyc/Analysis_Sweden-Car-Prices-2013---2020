geom_smooth(method = lm)
averageout %>%
filter(Nybilspris >= 432000) %>%
ggplot(aes(x=Tillverkningsar, y=Nybilspris, col=Marke))+
geom_point(alpha=0.5)+
geom_smooth(aes(method = lm))
averageout %>%
filter(Nybilspris >= 432000) %>%
ggplot(aes(x=Tillverkningsar, y=Nybilspris, col=Marke))+
geom_point(alpha=0.5)+
geom_smooth(method = lm)
averageout %>%
filter(Nybilspris <= 250000) %>%
ggplot(aes(x=Tillverkningsar, y=Nybilspris, col=Marke))+
geom_point(alpha=0.5)+
geom_smooth(method = lm)
averageout %>%
filter(Nybilspris <= 250000) %>%
ggplot(aes(x=Tillverkningsar, y=Nybilspris, col=Marke))+
geom_point(alpha=0.5)+
geom_smooth(aes(group=1))
averageout %>%
filter(Nybilspris >= 432000, Nybilspris <= 800000 ) %>%
ggplot(aes(x=Tillverkningsar, y=Nybilspris, col=Marke))+
geom_point(alpha=0.5)+
geom_smooth(aes(group=1))
averageout %>%
filter(Nybilspris <= 250000) %>%
ggplot(aes(x=Tillverkningsar, y=log(Nybilspris), col=Marke))+
geom_point(alpha=0.5)+
geom_smooth(aes(group=1))
library(ggplot2)
ggplot(carprices, aes(x = Nybilspris)) +
theme_bw()+
geom_histogram(binwidth = 20) +
labs(y = "Modell",
x = "Nybilspris (binwidth = 20)",
title = " Price Dstribution")
library(ggplot2)
maindata %>%
ggplot(Nybilspris, aes(Marke)) +
geom_boxplot() +
facet_wrap("Tillverkningsar") +
coord_flip()
maindata %>%
ggplot(Nybilspris, aes(Marke, cty)) +
geom_boxplot() +
facet_wrap("Tillverkningsar") +
coord_flip()
maindata %>%
ggplot(Nybilspris, aes(Marke)) +
geom_boxplot() +
facet_wrap("Tillverkningsar")+
coord_flip()
maindata %>%
ggplot(Nybilspris, aes(Marke, cty)) +
geom_boxplot() +
facet_wrap("Tillverkningsar")+
coord_flip()
maindata %>%
ggplot(Nybilspris, aes(Marke, Tillverkningsar)) +
geom_boxplot() +
facet_wrap("Tillverkningsar")+
coord_flip()
maindata %>%
ggplot(Nybilspris, aes(BransleTyp, Tillverkningsar)) +
geom_boxplot() +
facet_wrap("Tillverkningsar")+
coord_flip()
library(ggplot2)
qplot(maindata, data =Nybilspris ,fill = BransleTyp)
maindata %>%
qplot(Nybilspris, data = count(Modell) ,fill = BransleTyp)
maindata %>%
qplot(Nybilspris, data = count(Marke) ,fill = BransleTyp)
maindata %>%
qplot(Nybilspris, data = count ,fill = BransleTyp)
maindata %>%
gqplot(Nybilspris, data = count ,fill = BransleTyp)
maindata %>%
ggplot(Nybilspris, data = count ,fill = BransleTyp)
maindata %>%
qplot(Nybilspris, data = count ,fill = BransleTyp)
hist(mean(maindata$Nybilspris))
maindata %>%
plot(Nybilspris, dnorm(Nybilspris, mean(Nybilspris), sd = 0.5))
dnorm <- dnorm(Nybilspris, mean(Nybilspris), sd = 0.5)
maindata %>%
plot(Nybilspris, dnorm)
x <- maindata$Nybilspris
y <- dnorm(x, mean = mean(x), sd = 0.5)
plot(x,y)
print(x)
mean(x)
y <- dnorm(x, mean = 405842 sd = 0.5)
y <- dnorm(x, mean = 405842, sd = 0.5)
plot(x,y)
print(rnorm(50))
y <- rnorm(50)
hist(y, main = "Normal Distribution")
source('C:/Users/ErdemK/Desktop/Side Projects/DATA SCIENCE/R/SwedenCars/CarpricesSweden.R', encoding = 'UTF-8')
plot(maindata$Tillverkningsar, maindata$Nybilspris)
plot(maindata$Nybilspris, maindata$Tillverkningsar)
summary(averageout)
averageout %>%
filter(Nybilspris >= (432000-(432000*0.9)), Nybilspris <= 800000 ) %>%
ggplot(aes(x=Tillverkningsar, y=Nybilspris, col=Marke))+
geom_point(alpha=0.5)+
geom_smooth(aes(group=1))
View(df2020)
library(dplyr)
df2020 %>%
select (Fordonstyp, Nybilspris) %>%
filter(   Fordonstyp == "Personbil") %>%
hist()
median20 <- df2020 %>%
select (Fordonstyp, Nybilspris) %>%
filter(   Fordonstyp == "Personbil")
hist(median20)
library(UsingR)
median20 <- df2020$Nybilspris
hist(median20)
bins2020 <- seq(smallest, largest)
hist(x, breaks = bins2020, xlab = "Nybilspris", main = "2020 Price Distribution")
bins2020 <- seq(smallest, largest)
bins2020 <- rnorm(median20)
hist(median20, breaks = bins2020, xlab = "Nybilspris", main = "2020 Price Distribution")
na.omit(median20)
bins2020 <- rnorm(median20)
hist(median20, breaks = bins2020, xlab = "Nybilspris", main = "2020 Price Distribution")
View(median20)
is.na(median20)
bins2020 <- rnorm(median20)
hist(median20, breaks = bins2020, xlab = "Nybilspris", main = "2020 Price Distribution")
median20 <- df2020$Nybilspris
library(dplyr)
median20 <- df2020$Nybilspris
bins2020 <- rnorm(median20)
hist(median20, breaks = bins2020, xlab = "Nybilspris", main = "2020 Price Distribution")
bins2020 <- seq(0,270000,2000000)
hist(median20, breaks = bins2020, xlab = "Nybilspris", main = "2020 Price Distribution")
library(UsingR)
median20 <- df2020$Nybilspris
bins2020 <- seq(0,270000,2000000)
hist(median20, breaks = bins2020, xlab = "Nybilspris", main = "2020 Price Distribution")
bins2020 <- seq(80000,2000000)
hist(median20, breaks = bins2020, xlab = "Nybilspris", main = "2020 Price Distribution")
View(median20)
bins2020 <- seq(90000,600000)
hist(median20, breaks = bins2020, xlab = "Nybilspris", main = "2020 Price Distribution")
bins <- seq(smallest, largest)
bins <- seq(-80000,6000000,by = 80000)
hist(median20, breaks = bins2020, xlab = "Nybilspris", main = "2020 Price Distribution")
bins <- seq(-80000,6000000)
hist(median20, breaks = bins2020, xlab = "Nybilspris", main = "2020 Price Distribution")
bins <- seq(-80000,6000000, by = 1)
hist(median20, breaks = bins2020, xlab = "Nybilspris", main = "2020 Price Distribution")
bins <- seq(-80000,6000000, by = 10)
hist(median20, breaks = bins2020, xlab = "Nybilspris", main = "2020 Price Distribution")
bins <- seq(-80000,6100000, by = 10)
hist(median20, breaks = bins2020, xlab = "Nybilspris", main = "2020 Price Distribution")
bins <- seq(80000,6100000, by = 10)
hist(median20, breaks = bins2020, xlab = "Nybilspris", main = "2020 Price Distribution")
hist(median20, breaks = 10000, xlab = "Nybilspris", main = "2020 Price Distribution")
library(ggplot2)
median20 <- df2020$Nybilspris
set.seed(1)
df <- data.frame(PF = 10*rnorm(1000))
ggplot(df, aes(x = PF)) +
geom_histogram(aes(y =..density..),
breaks = seq(-50, 50, by = 10),
colour = "black",
fill = "white") +
stat_function(fun = dnorm, args = list(mean = mean(df$PF), sd = sd(df$PF)))
library(ggplot2)
set.seed(1)
dat_hist <- data.frame(
group = c(rep("A", 200), rep("B",150)),
value = c(rnorm(200, 20, 5), rnorm(150,25,10)))
# Set desired binwidth and number of non-missing obs
bw = 2
n_obs = sum(!is.na(dat_hist$value))
g <- ggplot(dat_hist, aes(value))  +
geom_histogram(aes(y = ..density..), binwidth = bw, colour = "black") +
stat_function(fun = dnorm, args = list(mean = mean(dat_hist$value), sd = sd(dat_hist$value)))
ybreaks = seq(0,50,5)
## On primary axis
g + scale_y_continuous("Counts", breaks = round(ybreaks / (bw * n_obs),3), labels = ybreaks)
## Or on secondary axis
g + scale_y_continuous("Density", sec.axis = sec_axis(
trans = ~ . * bw * n_obs, name = "Counts", breaks = ybreaks))
library(ggplot2)
set.seed(1)
# Set desired binwidth and number of non-missing obs
bw = 2
n_obs = sum(!is.na(df2020$Nybilspris))
g <- ggplot(df2020$Nybilspris, aes(value))  +
geom_histogram(aes(y = ..density..), binwidth = bw, colour = "black") +
stat_function(fun = dnorm, args = list(mean = mean(df2020$Nybilspris), sd = sd(df2020$Nybilspris)))
pris2020 <- data.frame(df2020$Nybilspris)
library(ggplot2)
set.seed(1)
pris2020 <- data.frame(df2020$Nybilspris)
# Set desired binwidth and number of non-missing obs
bw = 2
n_obs = sum(!is.na(pris2020))
g <- ggplot(pris2020, aes(value))  +
geom_histogram(aes(y = ..density..), binwidth = bw, colour = "black") +
stat_function(fun = dnorm, args = list(mean = mean(pris2020), sd = sd(pris2020)))
View(pris2020)
library(ggplot2)
set.seed(1)
pris2020 <- data.frame(df2020$Nybilspris)
# Set desired binwidth and number of non-missing obs
bw = 2
n_obs = sum(!is.na(pris2020))
g <- ggplot(pris2020, aes(value))  +
geom_histogram(aes(y = ..density..), binwidth = bw, colour = "black") +
stat_function(fun = dnorm, args = list(mean = lapply(pris2020, mean, na.rm = TRUE)), sd = sd(pris2020)))
mean(pris2020)
mean(pris2020, na.rm = TRUE)
summary(pris2020)
library(ggplot2)
set.seed(1)
pris2020 <- data.frame(df2020$Nybilspris)
# Set desired binwidth and number of non-missing obs
bw = 2
n_obs = sum(!is.na(pris2020))
g <- ggplot(pris2020, aes(value))  +
geom_histogram(aes(y = ..density..), binwidth = bw, colour = "black") +
stat_function(fun = dnorm, args = list(mean = 475874), sd = sd(dat_hist$value)))
library(ggplot2)
set.seed(1)
pris2020 <- data.frame(df2020$Nybilspris)
# Set desired binwidth and number of non-missing obs
bw = 2
n_obs = sum(!is.na(pris2020))
g <- ggplot(pris2020, aes(value))  +
geom_histogram(aes(y = ..density..), binwidth = bw, colour = "black") +
stat_function(fun = dnorm, args = list(mean = "475874"), sd = sd(dat_hist$value)))
library(ggplot2)
set.seed(1)
pris2020 <- data.frame(df2020$Nybilspris)
# Set desired binwidth and number of non-missing obs
bw = 2
n_obs = sum(!is.na(pris2020))
g <- ggplot(pris2020, aes(value))  +
geom_histogram(aes(y = ..density..), binwidth = bw, colour = "black") +
stat_function(fun = dnorm, args = list(mean = '475874'), sd = sd(dat_hist$value)))
View(pris2020)
pris <- is.na(pris2020)
library(ggplot2)
set.seed(1)
pris2020 <- data.frame(df2020$Nybilspris)
pris <- is.na(pris2020)
# Set desired binwidth and number of non-missing obs
bw = 2
n_obs = sum(!is.na(pris))
g <- ggplot(pris, aes(value))  +
geom_histogram(aes(y = ..density..), binwidth = bw, colour = "black") +
stat_function(fun = dnorm, args = list(mean = mean(pris), sd = sd(pris)))
library(ggplot2)
set.seed(1)
pris2020 <- data.frame(df2020$Nybilspris)
pris <- data.frame(is.na(pris2020))
# Set desired binwidth and number of non-missing obs
bw = 2
n_obs = sum(!is.na(pris))
g <- ggplot(pris, aes(value))  +
geom_histogram(aes(y = ..density..), binwidth = bw, colour = "black") +
stat_function(fun = dnorm, args = list(mean = mean(pris), sd = sd(pris)))
pris <- df2020 %>%
is.na(df2020$Nybilspris) %>% data.frame(df2020$Nybilspris)
pris <- df2020 %>%
data.frame(df2020$Nybilspris)  %>% is.na(df2020$Nybilspris)
pris <- df2020 %>%
data.frame(df2020$Nybilspris)  %>% is.na(df2020$Nybilspris)
library(ggplot2)
is.na(df2020)
pris <- df2020 %>%
data.frame(df2020$Nybilspris)
mean(pris)
class(pris)
lapply(pris, mean, na.rm = TRUE)
sapply(pris, mean, na.rm = TRUE)
colMeans(pris, na.rm = TRUE)
View(pris)
pris <- df2020 %>%
data.frame(df2020$Nybilspris)
mean(pris)
colMeans(pris, na.rm = TRUE)
View(pris)
colMeans(df2020$Nybilspris, na.rm = TRUE)
#joning all data for years as one dataframe
swcarprice <- rbind(df2013,df2014,df2015,df2016,df2017,df2018,df2019,df2020) #joining variables
#Data Source :Nybilspriser, API (bilar med tillverkningsår 2013-2020) https://oppnadata.se/datamangd/#esc_entry=68529&esc_context=6
df2013 <- read.csv("SKVFS_2013_11.csv", header = TRUE, sep = ";", dec = ".")
df2014 <- read.csv("SKVFS_2014_13.csv", header = TRUE, sep = ";", dec = ".")
df2015 <- read.csv("SKVFS_2015_11.csv", header = TRUE, sep = ";", dec = ".")
df2016 <- read.csv("SKVFS_2016_10_bilaga_4.csv", header = TRUE, sep = ";", dec = ".")
df2017 <- read.csv("SKVFS2017_10_foreskrift.csv", header = TRUE, sep = ";", dec = ".")
df2018 <- read.csv("SKVFS_2018_13.csv", header = TRUE, sep = ";", dec = ".")
df2019 <- read.csv("SKVFS2019-10.csv", header = TRUE, sep = ";", dec = ".")
df2020 <- read.csv("Nybilspriser 2020 SKVFS2019_21.csv", header = TRUE, sep = ";", dec = ".")
#joning all data for years as one dataframe
swcarprice <- rbind(df2013,df2014,df2015,df2016,df2017,df2018,df2019,df2020) #joining variables
#saving joined file as csv
#write.csv(swcarprice, 'swcarprice.csv') #saving joined file as csv
summary(swcarprice)
library(gapminder)
attach(swcarprice)
median(swcarprice$Nybilspris) #334900
hist(log(swcarprice$Nybilspris))
boxplot(swcarprice$Nybilspris ~ swcarprice$Marke)
plot(swcarprice$Nybilspris ~ swcarprice$Marke)
library(dplyr)
swcarprice %>%
select (Marke, Nybilspris) %>%
filter(   Marke == "Audi" |
Marke == "Mercedes Benz" |
Marke == "BMW" |
Marke == "Volvo") %>%
group_by(Marke) %>%
summarise(Average_price = mean(Nybilspris))
plot(Nybilspris~ Tillverkningsar)
ort <- swcarprice %>%
select (Marke, Nybilspris) %>%
filter( Fordonstyp == "Personbil") %>%
group_by(Marke) %>%
summarise(Average_price = mean(Nybilspris))
plot(ort)
head(swcarprice)
#Extracting data (Personbil rows in Fordonstyp,Tillverkningsar, Marke, Nybilspris, BransleTyp columns) for analysis
library(dplyr)
maindata <- filter(swcarprice, Fordonstyp == "Personbil") %>%
select(Marke, Modell, Tillverkningsar, Nybilspris, BransleTyp)
View(maindata)
write.csv(maindata, 'Passangercar_prices_sweden.csv')
#Calculating average prices for years for each brand
carpricessweden <- read.csv("Passangercar_prices_sweden.csv", sep = ",", dec = ".")
View(carpricessweden)
View(is.na(carpricessweden))
library(dplyr)
average <- dput(carpricessweden)
averageout <- aggregate(. ~ Marke + Tillverkningsar, carpricessweden[-2], FUN = median)
View(averageout)
summary(averageout)
summary(Nybilspris)
#Brands with Median Prices range between 25000SEK to 432000SEK
library(ggplot2)
averageout %>%
filter(Nybilspris >= (432000-(432000*0.9)), Nybilspris <= 800000 ) %>%
ggplot(aes(x=Tillverkningsar, y=Nybilspris, col=Marke))+
geom_point(alpha=0.5)+
geom_smooth(aes(group=1))
#facet_wrap(~Marke)
#Brands with Median Prices below 25000SEK
library(ggplot2)
averageout %>%
filter(Nybilspris <= 250000) %>%
ggplot(aes(x=Tillverkningsar, y=Nybilspris, col=Marke))+
geom_point(alpha=0.5)+
geom_smooth(aes(group=1))
#facet_wrap(~Marke)
#Brands with Median Prices above 43200SEK
library(ggplot2)
averageout %>%
filter(Nybilspris >= 432000) %>%
ggplot(aes(x=Tillverkningsar, y=Nybilspris, col=Marke))+
geom_point(alpha=0.5)+
geom_smooth(method = lm)
#facet_wrap(~Marke)
#Compare if BMW is really more expensive than Audi with t-test & null hyphothesis
bmwvsaudi <- swcarprice %>%
select (Marke, Nybilspris) %>%
filter(   Marke == "Audi" |
Marke == "BMW")
t.test(data = bmwvsaudi, Nybilspris ~ Marke)
median(swcarprice$Nybilspris) #334900
is.na(df2020)
na.omit(df2020)
mean(df2020$Nybilspris)
#Extract models and prices
modelp <- filter(df2020, Fordonstyp == "Personbil") %>%
select(Modell, Nybilspris)
View(df2020)
#Extract models and prices
library(dplyr)
modelp <- filter(df2020, Fordonstyp == "Personbil") %>%
select(Modell, Nybilspris)
head(df2020)
#Extract models and prices
library(dplyr)
modelp <- filter(df2020, Fordonstyp == "Personbil") %>%
select(Modell, Nybilspris)
#Extracting data (Personbil rows in Fordonstyp,Tillverkningsar, Marke, Nybilspris, BransleTyp columns) for analysis
library(dplyr)
maindata <- filter(swcarprice, Fordonstyp == "Personbil") %>%
select(Marke, Modell, Tillverkningsar, Nybilspris, BransleTyp)
library(dplyr)
swcarprice %>%
select (Marke, Nybilspris) %>%
filter(   Marke == "Audi" |
Marke == "Mercedes Benz" |
Marke == "BMW" |
Marke == "Volvo") %>%
group_by(Marke) %>%
summarise(Average_price = mean(Nybilspris))
#joning all data for years as one dataframe
swcarprice <- rbind(df2013,df2014,df2015,df2016,df2017,df2018,df2019,df2020) #joining variables
#Extract models and prices
library(dplyr)
modelp <- filter(df2020, Fordonstyp == "Personbil") %>%
select(Modell, Nybilspris)
#Data Source :Nybilspriser, API (bilar med tillverkningsår 2013-2020) https://oppnadata.se/datamangd/#esc_entry=68529&esc_context=6
df2013 <- read.csv("SKVFS_2013_11.csv", header = TRUE, sep = ";", dec = ".")
df2014 <- read.csv("SKVFS_2014_13.csv", header = TRUE, sep = ";", dec = ".")
df2015 <- read.csv("SKVFS_2015_11.csv", header = TRUE, sep = ";", dec = ".")
df2016 <- read.csv("SKVFS_2016_10_bilaga_4.csv", header = TRUE, sep = ";", dec = ".")
df2017 <- read.csv("SKVFS2017_10_foreskrift.csv", header = TRUE, sep = ";", dec = ".")
df2018 <- read.csv("SKVFS_2018_13.csv", header = TRUE, sep = ";", dec = ".")
df2019 <- read.csv("SKVFS2019-10.csv", header = TRUE, sep = ";", dec = ".")
df2020 <- read.csv("Nybilspriser 2020 SKVFS2019_21.csv", header = TRUE, sep = ";", dec = ".")
#joning all data for years as one dataframe
swcarprice <- rbind(df2013,df2014,df2015,df2016,df2017,df2018,df2019,df2020) #joining variables
#saving joined file as csv
#write.csv(swcarprice, 'swcarprice.csv') #saving joined file as csv
library(dplyr)
#Remove "NAs" from 2020 data (df2020)
na.omit(df2020)
mean(df2020$Nybilspris)
head(df2020)
#Extract models and prices
library(dplyr)
modelp <- filter(df2020, Fordonstyp == "Personbil") %>%
select(Modell, Nybilspris)
View(df2020)
summary(swcarprice)
library(gapminder)
attach(swcarprice)
median(swcarprice$Nybilspris) #334900
hist(log(swcarprice$Nybilspris))
boxplot(swcarprice$Nybilspris ~ swcarprice$Marke)
plot(swcarprice$Nybilspris ~ swcarprice$Marke)
library(dplyr)
swcarprice %>%
select (Marke, Nybilspris) %>%
filter(   Marke == "Audi" |
Marke == "Mercedes Benz" |
Marke == "BMW" |
Marke == "Volvo") %>%
group_by(Marke) %>%
summarise(Average_price = mean(Nybilspris))
plot(Nybilspris~ Tillverkningsar)
ort <- swcarprice %>%
select (Marke, Nybilspris) %>%
filter( Fordonstyp == "Personbil") %>%
group_by(Marke) %>%
summarise(Average_price = mean(Nybilspris))
plot(ort)
head(swcarprice)
#Extracting data (Personbil rows in Fordonstyp,Tillverkningsar, Marke, Nybilspris, BransleTyp columns) for analysis
library(dplyr)
maindata <- filter(swcarprice, Fordonstyp == "Personbil") %>%
select(Marke, Modell, Tillverkningsar, Nybilspris, BransleTyp)
View(maindata)
write.csv(maindata, 'Passangercar_prices_sweden.csv')
#Calculating average prices for years for each brand
carpricessweden <- read.csv("Passangercar_prices_sweden.csv", sep = ",", dec = ".")
View(carpricessweden)
View(is.na(carpricessweden))
library(dplyr)
average <- dput(carpricessweden)
averageout <- aggregate(. ~ Marke + Tillverkningsar, carpricessweden[-2], FUN = median)
View(averageout)
summary(averageout)
summary(Nybilspris)
#Brands with Median Prices range between 25000SEK to 432000SEK
library(ggplot2)
averageout %>%
filter(Nybilspris >= (432000-(432000*0.9)), Nybilspris <= 800000 ) %>%
ggplot(aes(x=Tillverkningsar, y=Nybilspris, col=Marke))+
geom_point(alpha=0.5)+
geom_smooth(aes(group=1))
#facet_wrap(~Marke)
#Brands with Median Prices below 25000SEK
library(ggplot2)
averageout %>%
filter(Nybilspris <= 250000) %>%
ggplot(aes(x=Tillverkningsar, y=Nybilspris, col=Marke))+
geom_point(alpha=0.5)+
geom_smooth(aes(group=1))
#facet_wrap(~Marke)
#Brands with Median Prices above 43200SEK
library(ggplot2)
averageout %>%
filter(Nybilspris >= 432000) %>%
ggplot(aes(x=Tillverkningsar, y=Nybilspris, col=Marke))+
geom_point(alpha=0.5)+
geom_smooth(method = lm)
#facet_wrap(~Marke)
#Compare if BMW is really more expensive than Audi with t-test & null hyphothesis
bmwvsaudi <- swcarprice %>%
select (Marke, Nybilspris) %>%
filter(   Marke == "Audi" |
Marke == "BMW")
t.test(data = bmwvsaudi, Nybilspris ~ Marke)
#saving joined file as csv
#write.csv(swcarprice, 'swcarprice.csv') #saving joined file as csv
devtools::install_github("rubenarslan/formr")
source('C:/Users/ErdemK/Desktop/Side Projects/DATA SCIENCE/R/SwedenCars/CarpricesSweden.R', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/ErdemK/Desktop/Side Projects/DATA SCIENCE/R/SwedenCars/CarpricesSweden.R', encoding = 'UTF-8')
